definitions:
  models.ResponseError:
    properties:
      error: {}
    type: object
  user_service.Branch:
    properties:
      active:
        type: boolean
      address:
        type: string
      close_time:
        type: string
      created_at:
        type: string
      deleted_at:
        type: integer
      id:
        type: string
      location:
        type: string
      name:
        type: string
      open_time:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  user_service.CreateBranch:
    properties:
      active:
        type: boolean
      address:
        type: string
      close_time:
        type: string
      location:
        type: string
      name:
        type: string
      open_time:
        type: string
      phone:
        type: string
    type: object
  user_service.CreateCustomer:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      firstname:
        type: string
      gender:
        type: string
      languange:
        type: string
      lastname:
        type: string
      phone:
        type: string
    type: object
  user_service.CreateSeller:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      shop_id:
        type: string
    type: object
  user_service.CreateShop:
    properties:
      currency:
        type: string
      description_en:
        type: string
      description_ru:
        type: string
      description_uz:
        type: string
      location:
        type: string
      name_en:
        type: string
      name_ru:
        type: string
      name_uz:
        type: string
      payment_types:
        items:
          type: string
        type: array
      phone:
        type: string
      slug:
        type: string
    type: object
  user_service.CreateUs:
    properties:
      gmail:
        type: string
      name:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  user_service.Customer:
    properties:
      created_at:
        type: string
      date_of_birth:
        type: string
      deleted_at:
        type: integer
      email:
        type: string
      firstname:
        type: string
      gender:
        type: string
      id:
        type: string
      languange:
        type: string
      lastname:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  user_service.Empty:
    type: object
  user_service.Empty2:
    type: object
  user_service.Empty3:
    type: object
  user_service.Empty4:
    type: object
  user_service.GetListBranchResponse:
    properties:
      branches:
        items:
          $ref: '#/definitions/user_service.Branch'
        type: array
      count:
        type: integer
    type: object
  user_service.GetListCustomerResponse:
    properties:
      Count:
        type: integer
      Customers:
        items:
          $ref: '#/definitions/user_service.Customer'
        type: array
    type: object
  user_service.GetListSellerResponse:
    properties:
      count:
        type: integer
      sellers:
        items:
          $ref: '#/definitions/user_service.Seller'
        type: array
    type: object
  user_service.GetListShopResponse:
    properties:
      count:
        type: integer
      shops:
        items:
          $ref: '#/definitions/user_service.Shop'
        type: array
    type: object
  user_service.GetListUsResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/user_service.Us'
        type: array
    type: object
  user_service.Seller:
    properties:
      created_at:
        type: string
      deleted_at:
        type: integer
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      shop_id:
        type: string
      updated_at:
        type: string
    type: object
  user_service.Shop:
    properties:
      created_at:
        type: string
      currency:
        type: string
      deleted_at:
        type: string
      description_en:
        type: string
      description_ru:
        type: string
      description_uz:
        type: string
      id:
        type: string
      location:
        type: string
      name_en:
        type: string
      name_ru:
        type: string
      name_uz:
        type: string
      payment_types:
        items:
          type: string
        type: array
      phone:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  user_service.UpdateBranch:
    properties:
      active:
        type: boolean
      address:
        type: string
      close_time:
        type: string
      id:
        type: string
      location:
        type: string
      name:
        type: string
      open_time:
        type: string
      phone:
        type: string
    type: object
  user_service.UpdateCustomer:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: string
      languange:
        type: string
      lastname:
        type: string
      phone:
        type: string
    type: object
  user_service.UpdateSeller:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      shop_id:
        type: string
    type: object
  user_service.UpdateShop:
    properties:
      currency:
        type: string
      description_en:
        type: string
      description_ru:
        type: string
      description_uz:
        type: string
      id:
        type: string
      location:
        type: string
      name_en:
        type: string
      name_ru:
        type: string
      name_uz:
        type: string
      payment_types:
        items:
          type: string
        type: array
      phone:
        type: string
      slug:
        type: string
    type: object
  user_service.UpdateUs:
    properties:
      gmail:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  user_service.Us:
    properties:
      created_at:
        type: string
      deleted_at:
        type: integer
      gmail:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /CreateSeller:
    post:
      consumes:
      - application/json
      description: API for creating seller
      parameters:
      - description: seller
        in: body
        name: seller
        required: true
        schema:
          $ref: '#/definitions/user_service.CreateSeller'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.CreateSeller'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create seller
      tags:
      - seller
  /CreateShop:
    post:
      consumes:
      - application/json
      description: API for creating shop
      parameters:
      - description: shop
        in: body
        name: shop
        required: true
        schema:
          $ref: '#/definitions/user_service.CreateShop'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create shop
      tags:
      - shop
  /CreateUser:
    post:
      consumes:
      - application/json
      description: API for creating user
      parameters:
      - description: user
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/user_service.CreateUs'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.CreateUs'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create user
      tags:
      - user
  /DeleteSeller/{id}:
    delete:
      consumes:
      - application/json
      description: API for deleting a seller by ID
      parameters:
      - description: seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Empty2'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a seller by ID
      tags:
      - seller
  /DeleteShop/{id}:
    delete:
      consumes:
      - application/json
      description: API for deleting a shop by ID
      parameters:
      - description: shop ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Empty4'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a shop by ID
      tags:
      - shop
  /DeleteUser/{id}:
    delete:
      consumes:
      - application/json
      description: API for deleting a user by ID
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a user by ID
      tags:
      - user
  /GetByIdSeller/{id}:
    get:
      consumes:
      - application/json
      description: API for getting a single seller by ID
      parameters:
      - description: seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Seller'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a single seller by ID
      tags:
      - seller
  /GetByIdShop/{id}:
    get:
      consumes:
      - application/json
      description: API for getting a single shop by ID
      parameters:
      - description: shop ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a single shop by ID
      tags:
      - shop
  /GetByIdUser/{id}:
    get:
      consumes:
      - application/json
      description: API for getting a single user by ID
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Us'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a single user by ID
      tags:
      - user
  /GetListBranch:
    get:
      consumes:
      - application/json
      description: API for getting list branch
      parameters:
      - description: branches
        in: query
        name: branch
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetListBranchResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get List Branch
      tags:
      - branch
  /GetListSeller:
    get:
      consumes:
      - application/json
      description: API for getting list seller
      parameters:
      - description: sellers
        in: query
        name: seller
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetListSellerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get List seller
      tags:
      - seller
  /GetListShop:
    get:
      consumes:
      - application/json
      description: API for getting list of shops
      parameters:
      - description: shops
        in: query
        name: shop
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetListShopResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get list of shops
      tags:
      - shop
  /GetListUser:
    get:
      consumes:
      - application/json
      description: API for getting list user
      parameters:
      - description: system_users
        in: query
        name: system_user
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetListUsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get List user
      tags:
      - user
  /UpdateSeller/{id}:
    put:
      consumes:
      - application/json
      description: API for updating a seller by ID
      parameters:
      - description: seller ID
        in: path
        name: id
        required: true
        type: string
      - description: seller
        in: body
        name: seller
        required: true
        schema:
          $ref: '#/definitions/user_service.UpdateSeller'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.UpdateSeller'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a seller by ID
      tags:
      - seller
  /UpdateShop/{id}:
    put:
      consumes:
      - application/json
      description: API for updating a shop by ID
      parameters:
      - description: shop ID
        in: path
        name: id
        required: true
        type: string
      - description: shop
        in: body
        name: shop
        required: true
        schema:
          $ref: '#/definitions/user_service.UpdateShop'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a shop by ID
      tags:
      - shop
  /UpdateUser/{id}:
    put:
      consumes:
      - application/json
      description: API for updating a user by ID
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: string
      - description: user
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/user_service.UpdateUs'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Us'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a user by ID
      tags:
      - user
  /createBranch:
    post:
      consumes:
      - application/json
      description: API for creating branch
      parameters:
      - description: branch
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/user_service.CreateBranch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.CreateBranch'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create branch
      tags:
      - branch
  /createCustomer:
    post:
      consumes:
      - application/json
      description: API for creating customer
      parameters:
      - description: customer
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/user_service.CreateCustomer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.CreateCustomer'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create customer
      tags:
      - customer
  /deleteBranch/{id}:
    delete:
      consumes:
      - application/json
      description: API for deleting a branch by ID
      parameters:
      - description: branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Empty3'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a branch by ID
      tags:
      - branch
  /deleteCustomer/{id}:
    delete:
      consumes:
      - application/json
      description: API for deleting a customer by ID
      parameters:
      - description: customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Empty'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a customer by ID
      tags:
      - customer
  /getbyidbranch/{id}:
    get:
      consumes:
      - application/json
      description: API for getting a single branch by ID
      parameters:
      - description: branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Branch'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a single branch by ID
      tags:
      - branch
  /getbyidcustomer/{id}:
    get:
      consumes:
      - application/json
      description: API for getting a single category by ID
      parameters:
      - description: customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Customer'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a single customer by ID
      tags:
      - customer
  /getlistcustomer:
    get:
      consumes:
      - application/json
      description: API for getting list customer
      parameters:
      - description: customers
        in: query
        name: customer
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.GetListCustomerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get List Customer
      tags:
      - customer
  /updateBranch/{id}:
    put:
      consumes:
      - application/json
      description: API for updating a branch by ID
      parameters:
      - description: branch ID
        in: path
        name: id
        required: true
        type: string
      - description: branch
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/user_service.UpdateBranch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Branch'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a branch by ID
      tags:
      - branch
  /updateCustomer/{id}:
    put:
      consumes:
      - application/json
      description: API for updating a customer by ID
      parameters:
      - description: customer ID
        in: path
        name: id
        required: true
        type: string
      - description: customer
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/user_service.UpdateCustomer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_service.Customer'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a customer by ID
      tags:
      - customer
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
